#!/usr/bin/env ruby
#================================================================================
# NiosII Makefile Extender
#================================================================================
require 'optparse'
require 'rexml/document'

MARKER = 'nios2-ext-makefile'

def parse_makefile
  mk = {:b => [], :a => []}
  filt = :b
  bsp = nil
  elf = nil
  puts "Info: Parsing current Makefile"
  open("Makefile").each_line {|line|
    if(filt == :f)
      filt = :a if line =~ /^#<\/#{MARKER}>/
    elsif(line =~ /^#<#{MARKER}>/)
      filt = :f
    else
      mk[filt] << line
      if(line =~ /^ELF\s*:=\s*(.*)$/ and !elf)
        elf = $1
      elsif(line =~ /^BSP_ROOT_DIR\s*:=\s*(.*)$/)
        bsp = $1
      end
    end
  }
  raise "ELF not found" if !elf
  mk[:elf] = elf
  puts "Info: Target is #{elf}"
  raise "BSP not found" if !bsp
  mk[:bsp] = bsp
  puts "Info: BSP found at #{bsp}"
  doc = REXML::Document.new(open("#{bsp}settings.bsp"))
  sopc = bsp + REXML::XPath.first(doc, '//SopcDesignFile').text
  mk[:sopcinfo] = sopc
  puts "Info: Loading sopcinfo '#{sopc}'"
  doc = REXML::Document.new(open("#{sopc}"))
  device = REXML::XPath.first(doc, '//parameter[@name="AUTO_DEVICE"]/value').text
  puts "Info: Device is #{device}"
  mk[:device] = device
  puts "Info: Makefile has already extended. Extension codes will be replaced." if
    !mk[:a].empty?
  mk
rescue => e
  abort "Error: #{e}"
end

def ext_makefile(args)
  flash = args[:flash].upcase
  if(flash =~ /^EPCS(1|4|16|64|128)$/)
    capacity = $1.to_i * 1024 * 1024 / 8
    case($1.to_i)
      when 1
        sector_size = 32 * 1024
      when 4..64
        sector_size = 64 * 1024
      when 128
        sector_size = 256 * 1024
    end
  else
    abort "Error: Flash device '#{flash}' is not supported"
  end
  puts "Info: Flash capacity is 0x%x bytes" % capacity
  puts "Info: Flash sector size is 0x%x bytes" % sector_size
  mk = parse_makefile
  if(mk[:device] =~ /^(EP[1-4]C[A-Z]*\d+)/)
    loader_dev = $1
  else
    abort "Error: This device is not supported"
  end
  if(!args[:sectors] and !args[:bytes] and !args[:after_sof])
    puts "Info: Investigating bootloader settings"
    type, val = nil
    Dir.glob(mk[:sopcinfo].sub(/\/\w+\.\w+$/, '/*_boot_rom.hex')) {|f|
      puts "Info: Investigating #{f}"
      open(f).each_line {|line|
        if(line =~ /^;\s*EPCS_ELF_(SECTORS|BYTES|AFTER_SOF)\s*=\s*(\d+)$/)
          type = $1
          val = $2.to_i
          break
        elsif(!(line =~ /^;/))
          break
        end
      }
      break if type
    }
    abort "Error: Bootloader settings cannot be found" if !type
    args[type.downcase.intern] = val
  end
  if(args[:after_sof])
    abort "Error: SOF file path required (-c option)" if !args[:sof]
    room = nil
    offset = 0
    puts "Info: Flash offset is auto (for after_sof mode)"
  else
    if(args[:sectors])
      room = args[:sectors] * sector_size
    elsif(args[:bytes])
      room = args[:bytes]
    end
    offset = capacity - room
    puts "Info: Flash offset is 0x%x (Room size is 0x%x bytes)" % [offset, room]
  end
  elf = File.basename(mk[:elf], ".*")
  if(args[:sof])
    base = elf + "_" + File.basename(args[:sof], ".*") + "_" + flash.downcase
  else
    base = elf + "_" + flash.downcase
  end
  cof = "#{base}.cof"
  puts "Warning: #{cof} will be overwritten" if File.exist?(cof)
  puts "Info: Generating #{cof}"
  open(cof, "w") {|f|
    rpd = 0
    rpd = 1 if args[:rpd]
    if(args[:sof])
      puts "Info: Joined SOF is '#{args[:sof]}'"
      f.puts(COF_TEMPLATE_SOF % [flash, loader_dev, base, elf, offset, args[:sof], rpd])
    else
      f.puts(COF_TEMPLATE % [flash, loader_dev, base, elf, offset, rpd])
    end
  }
  puts "Info: Modifying Makefile"
  open("Makefile.tmp", "w") {|f|
    f.print(mk[:b].join(''))
    f.puts("#<#{MARKER}>")
    if(args[:sof])
      f.puts(MAKE_TEMPLATE_SOF % args[:sof])
    end
    f.puts(MAKE_TEMPLATE_COMMON % flash.downcase)
    if(args[:rpd])
      puts "Info: Auto RPD generation enabled"
      f.puts(MAKE_TEMPLATE_RPD)
    end
    f.puts("#</#{MARKER}>")
    f.print(mk[:a].join(''))
  }
  File.rename("Makefile.tmp", "Makefile")
  puts "Info: Complete."
end

MAKE_TEMPLATE_SOF = <<EOD
#------------------------------------------------------------------------------
#                         SOF CONFIGURATION
#------------------------------------------------------------------------------
SOF := %s#{0;nil}
SOF_BASE := $(notdir $(basename $(SOF)))

EOD

MAKE_TEMPLATE_COMMON = <<EOD
#------------------------------------------------------------------------------
#                         HEX TARGET RULE
#------------------------------------------------------------------------------
HEX := $(basename $(ELF)).hex
HEX_SECTIONS := .exceptions .text .rodata .rwdata .bss
$(HEX) : $(ELF)
	@$(ECHO) Info: Creating $@
	$(OBJCOPY) $(addprefix -j,$(HEX_SECTIONS)) $< $@ || (rm -f $@; false)
	$(OBJCOPY) -Ibinary -Oihex $@ || (rm -f $@; false)
.PHONY : hex
hex : $(HEX)

#------------------------------------------------------------------------------
#                         JIC TARGET RULE
#------------------------------------------------------------------------------
FLASH_DEVICE ?= %s#{0;nil}
QUARTUS_CPF ?= $(QUARTUS_ROOTDIR)/bin/quartus_cpf
COF := $(basename $(ELF))$(addprefix _,$(SOF_BASE))_$(FLASH_DEVICE).cof
JIC := $(COF:.cof=.jic)
$(JIC) : $(COF) $(HEX)
	@$(ECHO) Info: Creating $@
	$(QUARTUS_CPF) -c $<
.PHONY : jic
jic : $(JIC)

#------------------------------------------------------------------------------
#                         JTAG PROGRAMMING
#------------------------------------------------------------------------------
QUARTUS_PGM ?= $(QUARTUS_ROOTDIR)/bin/quartus_pgm
.PHONY : prog
prog : $(JIC)
	@$(ECHO) Info: Programming $<
	$(QUARTUS_PGM) -m jtag -o ipv\\;$<

EOD

MAKE_TEMPLATE_RPD = <<EOD
#------------------------------------------------------------------------------
#                         RPD TARGET RULE
#------------------------------------------------------------------------------
RPD := $(JIC:.jic=_auto.rpd)
$(RPD) : $(JIC)
.PHONY : rpd
rpd : $(RPD)

EOD

COF_TEMPLATE = <<EOD
<?xml version="1.0" encoding="US-ASCII" standalone="yes"?>
<cof>
	<eprom_name>%s#{0;nil}</eprom_name>
	<flash_loader_device>%s#{1;nil}</flash_loader_device>
	<output_filename>%s.jic#{2;nil}</output_filename>
	<n_pages>0</n_pages>
	<width>1</width>
	<mode>7</mode>
	<hex_block>
		<hex_filename>%s.hex#{3;nil}</hex_filename>
		<hex_addressing>relative</hex_addressing>
		<hex_offset>%d#{4;nil}</hex_offset>
	</hex_block>
	<version>5</version>
	<create_cvp_file>0</create_cvp_file>
	<auto_create_rpd>%d#{5;nil}</auto_create_rpd>
	<options>
		<map_file>1</map_file>
	</options>
</cof>
EOD

COF_TEMPLATE_SOF = <<EOD
<?xml version="1.0" encoding="US-ASCII" standalone="yes"?>
<cof>
	<eprom_name>%s#{0;nil}</eprom_name>
	<flash_loader_device>%s#{1;nil}</flash_loader_device>
	<output_filename>%s.jic#{2;nil}</output_filename>
	<n_pages>1</n_pages>
	<width>1</width>
	<mode>7</mode>
	<hex_block>
		<hex_filename>%s.hex#{3;nil}</hex_filename>
		<hex_addressing>relative</hex_addressing>
		<hex_offset>%d#{4;nil}</hex_offset>
	</hex_block>
	<sof_data>
		<start_address>00000000</start_address>
		<user_name>Page_0</user_name>
		<page_flags>1</page_flags>
		<bit0>
			<sof_filename>%s#{5;nil}<compress_bitstream>1</compress_bitstream></sof_filename>
		</bit0>
	</sof_data>
	<version>5</version>
	<create_cvp_file>0</create_cvp_file>
	<auto_create_rpd>%d#{6;nil}</auto_create_rpd>
	<options>
		<map_file>1</map_file>
	</options>
</cof>
EOD

if(__FILE__ == $0)
  args = {}
  OptionParser.new {|o|
    o.on('-f FLASH') {|v| args[:flash] = v }
    o.on('-s SECTORS') {|v| args[:sectors] = v.to_i }
    o.on('-b BYTES') {|v| args[:bytes] = v.to_i }
    o.on('-a') { args[:after_sof] = 1 }
    o.on('-c SOF') {|v| args[:sof] = v }
    o.on('-r') { args[:rpd] = true }
    o.parse!(ARGV)
  }
  if(!ARGV.empty? or !args[:flash] or [args[:sectors], args[:bytes], args[:after_sof]].nitems > 1)
    abort <<EOD 
Usage: #{File.basename($0)} -f <flash_device_name> [-s <sectors>|-b <bytes>|-a] [-c <sof_path>] [-r]
EOD
  end
  ext_makefile(args)
end

# vim:ft=ruby:
